// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SalesbookTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SalesbookTestCases")]
    public partial class SalesbookTestCasesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SalesbookTestCases.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SalesbookTestCases", "Testcases will be written here ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if new Sales Entries record has been added with valid data")]
        public virtual void VerifyIfNewSalesEntriesRecordHasBeenAddedWithValidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if new Sales Entries record has been added with valid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.Given("The user is in \"salesInvoicing\" window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table1.AddRow(new string[] {
                            "Clicks",
                            "Add",
                            "Button",
                            "",
                            "salesInvoicing"});
                table1.AddRow(new string[] {
                            "Selects",
                            "Sales Book Entries",
                            "Radio",
                            "",
                            "selectEntryType"});
                table1.AddRow(new string[] {
                            "Clicks",
                            "OK",
                            "Button",
                            "",
                            "selectEntryType"});
                table1.AddRow(new string[] {
                            "Enters",
                            "Account:",
                            "Input",
                            "CUS1",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Enters",
                            "Total:",
                            "Input",
                            "100",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Double clicks",
                            "1",
                            "VATAnalysis",
                            "",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Enters",
                            "1",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Enters",
                            "2",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Enters",
                            "3",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Double clicks",
                            "4",
                            "AnalysisCategories",
                            "",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Clicks",
                            "Save",
                            "Button",
                            "",
                            "salesBookEntry"});
                table1.AddRow(new string[] {
                            "Clicks",
                            "Cancel",
                            "Button",
                            "",
                            "salesBookEntry"});
#line 8
    testRunner.When("The user performs the following actions:", ((string)(null)), table1, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table2.AddRow(new string[] {
                            "Checks new record",
                            ".",
                            "DataGrid",
                            "",
                            "salesInvoicingBook"});
#line 23
    testRunner.Then("Verify the following actions:", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if new Sales Entries record has been added with empty data")]
        public virtual void VerifyIfNewSalesEntriesRecordHasBeenAddedWithEmptyData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if new Sales Entries record has been added with empty data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
    testRunner.Given("The user is in \"salesInvoicing\" window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table3.AddRow(new string[] {
                            "Clicks",
                            "Add",
                            "Button",
                            "",
                            "salesInvoicing"});
                table3.AddRow(new string[] {
                            "Selects",
                            "Sales Book Entries",
                            "Radio",
                            "",
                            "selectEntryType"});
                table3.AddRow(new string[] {
                            "Clicks",
                            "OK",
                            "Button",
                            "",
                            "selectEntryType"});
                table3.AddRow(new string[] {
                            "Clicks",
                            "Save",
                            "Button",
                            "",
                            "salesBookEntry"});
#line 29
    testRunner.When("The user performs the following actions:", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table4.AddRow(new string[] {
                            "Checks existence",
                            "Customer Account Code must be specified",
                            "ToolTip",
                            "",
                            ""});
#line 35
    testRunner.Then("Verify the following actions:", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if new Sales Entries record has been added with invalid data")]
        public virtual void VerifyIfNewSalesEntriesRecordHasBeenAddedWithInvalidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if new Sales Entries record has been added with invalid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
    testRunner.Given("The user is in \"salesInvoicing\" window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table5.AddRow(new string[] {
                            "Clicks",
                            "Add",
                            "Button",
                            "",
                            "salesInvoicing"});
                table5.AddRow(new string[] {
                            "Selects",
                            "Sales Book Entries",
                            "Radio",
                            "",
                            "selectEntryType"});
                table5.AddRow(new string[] {
                            "Clicks",
                            "OK",
                            "Button",
                            "",
                            "selectEntryType"});
                table5.AddRow(new string[] {
                            "Enters",
                            "Account:",
                            "Input",
                            "CUS1",
                            "salesBookEntry"});
                table5.AddRow(new string[] {
                            "Enters",
                            "Total:",
                            "Input",
                            "100",
                            "salesBookEntry"});
                table5.AddRow(new string[] {
                            "Double clicks",
                            "1",
                            "VATAnalysis",
                            "",
                            "salesBookEntry"});
                table5.AddRow(new string[] {
                            "Enters",
                            "1",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table5.AddRow(new string[] {
                            "Enters",
                            "2",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table5.AddRow(new string[] {
                            "Enters",
                            "3",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table5.AddRow(new string[] {
                            "Clicks",
                            "Save",
                            "Button",
                            "",
                            "salesBookEntry"});
#line 42
    testRunner.When("The user performs the following actions:", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table6.AddRow(new string[] {
                            "Checks existence",
                            "The total net amount has not been analysed correctly!",
                            "ToolTip",
                            "",
                            ""});
#line 54
    testRunner.Then("Verify the following actions:", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if new Sales Invoice record has been added with valid data")]
        public virtual void VerifyIfNewSalesInvoiceRecordHasBeenAddedWithValidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if new Sales Invoice record has been added with valid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
    testRunner.Given("The user is in \"salesInvoicing\" window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "Add",
                            "Button",
                            "",
                            "salesInvoicing"});
                table7.AddRow(new string[] {
                            "Selects",
                            "Sales Invoices",
                            "Radio",
                            "",
                            "selectEntryType"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "OK",
                            "Button",
                            "",
                            "selectEntryType"});
                table7.AddRow(new string[] {
                            "Enters",
                            "Your Reference:",
                            "Input",
                            "yourRef",
                            "salesInvoicingBookEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "Our Reference:",
                            "Input",
                            "ourRef",
                            "salesInvoicingBookEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "Sales Rep:",
                            "Input",
                            "CODE1",
                            "salesInvoicingBookEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "Account:",
                            "Input",
                            "CUS1",
                            "salesInvoicingBookEdit"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "Add",
                            "Button",
                            "",
                            "salesInvoicingBookEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "Product:",
                            "Input",
                            "PROD1",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "Quantity:",
                            "Input",
                            "10",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "Unit Price:",
                            "Input",
                            "200",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "1",
                            "AnalysisCategories",
                            "10",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "2",
                            "AnalysisCategories",
                            "10",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Enters",
                            "3",
                            "AnalysisCategories",
                            "10",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Double clicks",
                            "4",
                            "AnalysisCategories",
                            "",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "Save",
                            "Button",
                            "",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "Cancel",
                            "Button",
                            "",
                            "lineItemEdit"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "Yes",
                            "Button",
                            "",
                            "messagebox"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "Save",
                            "Button",
                            "",
                            "salesInvoicingBookEdit"});
                table7.AddRow(new string[] {
                            "Clicks",
                            "Cancel",
                            "Button",
                            "",
                            "salesInvoicingBookEdit"});
#line 63
    testRunner.When("The user performs the following actions:", ((string)(null)), table7, "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table8.AddRow(new string[] {
                            "Checks new record",
                            ".",
                            "DataGrid",
                            "",
                            "salesInvoicingBook"});
#line 91
testRunner.Then("Verify the following actions:", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if a Sales Book Entries record has been change with valid data")]
        public virtual void VerifyIfASalesBookEntriesRecordHasBeenChangeWithValidData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if a Sales Book Entries record has been change with valid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 98
    testRunner.Given("The user is in \"salesInvoicing\" window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table9.AddRow(new string[] {
                            "Clicks",
                            "1",
                            "DataGrid",
                            "",
                            "salesInvoicingBook"});
                table9.AddRow(new string[] {
                            "Clicks",
                            "Change",
                            "Button",
                            "",
                            "salesInvoicing"});
                table9.AddRow(new string[] {
                            "Enters",
                            "Account:",
                            "Input",
                            "CUS1",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Enters",
                            "Name:",
                            "Input",
                            "Linh",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Enters",
                            "Total:",
                            "Input",
                            "300",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Double clicks",
                            "2",
                            "VATAnalysisInput",
                            "",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Enters",
                            "1",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Enters",
                            "2",
                            "AnalysisCategories",
                            "10",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Enters",
                            "3",
                            "AnalysisCategories",
                            "20",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Double clicks",
                            "4",
                            "AnalysisCategories",
                            "",
                            "salesBookEntry"});
                table9.AddRow(new string[] {
                            "Clicks",
                            "Save",
                            "Button",
                            "",
                            "salesBookEntry"});
#line 99
    testRunner.When("The user performs the following actions:", ((string)(null)), table9, "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table10.AddRow(new string[] {
                            "Checks Display",
                            "Save",
                            "Button",
                            "",
                            "salesBookEntry"});
#line 112
testRunner.Then("Verify the following actions:", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify if Salesbook is closed when clicking \"close\"")]
        public virtual void VerifyIfSalesbookIsClosedWhenClickingClose()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify if Salesbook is closed when clicking \"close\"", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 119
    testRunner.Given("The user is in \"salesInvoicing\" window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table11.AddRow(new string[] {
                            "Clicks",
                            "Close",
                            "Button",
                            "",
                            "salesInvoicing"});
#line 120
    testRunner.When("The user performs the following actions:", ((string)(null)), table11, "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Element",
                            "Type",
                            "Detail",
                            "Window"});
                table12.AddRow(new string[] {
                            "Checks Display",
                            "container-1331",
                            "elementById",
                            "",
                            ""});
#line 124
testRunner.Then("Verify the following actions:", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
